/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DuckStarterV2Interface extends ethers.utils.Interface {
  functions: {
    "balances(address)": FunctionFragment;
    "claimed(address)": FunctionFragment;
    "depositReceiverAddress()": FunctionFragment;
    "depositToken()": FunctionFragment;
    "duckTiers()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "feeReceiverAddress()": FunctionFragment;
    "harvestStartTime()": FunctionFragment;
    "isVerified(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "refundCountdown()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewards(uint256)": FunctionFragment;
    "stakingFinishTime()": FunctionFragment;
    "stakingLimit()": FunctionFragment;
    "stakingStartTime()": FunctionFragment;
    "tierStakingLimits(uint256)": FunctionFragment;
    "tiersCap(uint256)": FunctionFragment;
    "tiersCapTime()": FunctionFragment;
    "tiersSold(uint256)": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totalTier0Limit()": FunctionFragment;
    "totalTier0Staked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userLastUnclaimedReward(address)": FunctionFragment;
    "verifyAddress()": FunctionFragment;
    "initialSetup(uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256[])": FunctionFragment;
    "secondarySetup(uint256,address)": FunctionFragment;
    "getUserStakingLimit(address)": FunctionFragment;
    "addReward(address,uint256)": FunctionFragment;
    "changeReward(uint256,address,uint256)": FunctionFragment;
    "stake(uint256,bytes)": FunctionFragment;
    "refund()": FunctionFragment;
    "claimReward()": FunctionFragment;
    "getTierStakingLimits()": FunctionFragment;
    "getTiersSold()": FunctionFragment;
    "getTiersCap()": FunctionFragment;
    "calculateReward(address)": FunctionFragment;
    "withdrawLostTokens(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "claimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositReceiverAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duckTiers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiverAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isVerified", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundCountdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingFinishTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tierStakingLimits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tiersCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tiersCapTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tiersSold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTier0Limit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTier0Staked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userLastUnclaimedReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialSetup",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "secondarySetup",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakingLimit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeReward",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTierStakingLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTiersSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTiersCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLostTokens",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duckTiers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerified", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundCountdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingFinishTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tierStakingLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tiersCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tiersCapTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tiersSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTier0Limit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTier0Staked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLastUnclaimedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondarySetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierStakingLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTiersSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTiersCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLostTokens",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,address,uint256,uint256)": EventFragment;
    "NewReward(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Refunded(address,uint256)": EventFragment;
    "RewardChanged(uint256,address,uint256)": EventFragment;
    "Staked(address,uint256,uint256)": EventFragment;
    "WithdrawnLostTokens(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnLostTokens"): EventFragment;
}

export class DuckStarterV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DuckStarterV2Interface;

  functions: {
    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    depositReceiverAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "depositReceiverAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    depositToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "depositToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    duckTiers(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "duckTiers()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    feePercent(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "feePercent()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    feeReceiverAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "feeReceiverAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    harvestStartTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "harvestStartTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isVerified(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isVerified(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    refundCountdown(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "refundCountdown()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      amount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      amount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    stakingFinishTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "stakingFinishTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stakingLimit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "stakingLimit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stakingStartTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "stakingStartTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tierStakingLimits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tierStakingLimits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tiersCap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tiersCap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tiersCapTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tiersCapTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tiersSold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tiersSold(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalStaked(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalStaked()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalTier0Limit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalTier0Limit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalTier0Staked(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalTier0Staked()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userLastUnclaimedReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userLastUnclaimedReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    verifyAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "verifyAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initialSetup(
      _stakingStartTime: BigNumberish,
      _stakingFinishTime: BigNumberish,
      _totalTier0Limit: BigNumberish,
      _stakingLimit: BigNumberish,
      _feePercent: BigNumberish,
      _tiersCap: BigNumberish[],
      _tiersCapTime: BigNumberish,
      _tierStakingLimits: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialSetup(uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256[])"(
      _stakingStartTime: BigNumberish,
      _stakingFinishTime: BigNumberish,
      _totalTier0Limit: BigNumberish,
      _stakingLimit: BigNumberish,
      _feePercent: BigNumberish,
      _tiersCap: BigNumberish[],
      _tiersCapTime: BigNumberish,
      _tierStakingLimits: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    secondarySetup(
      _harvestStartTime: BigNumberish,
      _verifyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "secondarySetup(uint256,address)"(
      _harvestStartTime: BigNumberish,
      _verifyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getUserStakingLimit(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUserStakingLimit(address)"(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    addReward(
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReward(address,uint256)"(
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeReward(
      index: BigNumberish,
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeReward(uint256,address,uint256)"(
      index: BigNumberish,
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256,bytes)"(
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    refund(overrides?: Overrides): Promise<ContractTransaction>;

    "refund()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimReward(overrides?: Overrides): Promise<ContractTransaction>;

    "claimReward()"(overrides?: Overrides): Promise<ContractTransaction>;

    getTierStakingLimits(
      overrides?: CallOverrides
    ): Promise<{
      res: BigNumber[];
      0: BigNumber[];
    }>;

    "getTierStakingLimits()"(
      overrides?: CallOverrides
    ): Promise<{
      res: BigNumber[];
      0: BigNumber[];
    }>;

    getTiersSold(
      overrides?: CallOverrides
    ): Promise<{
      res: BigNumber[];
      0: BigNumber[];
    }>;

    "getTiersSold()"(
      overrides?: CallOverrides
    ): Promise<{
      res: BigNumber[];
      0: BigNumber[];
    }>;

    getTiersCap(
      overrides?: CallOverrides
    ): Promise<{
      res: BigNumber[];
      0: BigNumber[];
    }>;

    "getTiersCap()"(
      overrides?: CallOverrides
    ): Promise<{
      res: BigNumber[];
      0: BigNumber[];
    }>;

    calculateReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calculateReward(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdrawLostTokens(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawLostTokens(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "claimed(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  depositReceiverAddress(overrides?: CallOverrides): Promise<string>;

  "depositReceiverAddress()"(overrides?: CallOverrides): Promise<string>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  "depositToken()"(overrides?: CallOverrides): Promise<string>;

  duckTiers(overrides?: CallOverrides): Promise<string>;

  "duckTiers()"(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  "feePercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeReceiverAddress(overrides?: CallOverrides): Promise<string>;

  "feeReceiverAddress()"(overrides?: CallOverrides): Promise<string>;

  harvestStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "harvestStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  isVerified(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isVerified(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  refundCountdown(overrides?: CallOverrides): Promise<BigNumber>;

  "refundCountdown()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewards(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    addr: string;
    amount: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  "rewards(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    addr: string;
    amount: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  stakingFinishTime(overrides?: CallOverrides): Promise<BigNumber>;

  "stakingFinishTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakingLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "stakingLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "stakingStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  tierStakingLimits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tierStakingLimits(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tiersCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "tiersCap(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tiersCapTime(overrides?: CallOverrides): Promise<BigNumber>;

  "tiersCapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  tiersSold(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "tiersSold(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalTier0Limit(overrides?: CallOverrides): Promise<BigNumber>;

  "totalTier0Limit()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalTier0Staked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalTier0Staked()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userLastUnclaimedReward(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userLastUnclaimedReward(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyAddress(overrides?: CallOverrides): Promise<string>;

  "verifyAddress()"(overrides?: CallOverrides): Promise<string>;

  initialSetup(
    _stakingStartTime: BigNumberish,
    _stakingFinishTime: BigNumberish,
    _totalTier0Limit: BigNumberish,
    _stakingLimit: BigNumberish,
    _feePercent: BigNumberish,
    _tiersCap: BigNumberish[],
    _tiersCapTime: BigNumberish,
    _tierStakingLimits: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialSetup(uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256[])"(
    _stakingStartTime: BigNumberish,
    _stakingFinishTime: BigNumberish,
    _totalTier0Limit: BigNumberish,
    _stakingLimit: BigNumberish,
    _feePercent: BigNumberish,
    _tiersCap: BigNumberish[],
    _tiersCapTime: BigNumberish,
    _tierStakingLimits: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  secondarySetup(
    _harvestStartTime: BigNumberish,
    _verifyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "secondarySetup(uint256,address)"(
    _harvestStartTime: BigNumberish,
    _verifyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getUserStakingLimit(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserStakingLimit(address)"(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addReward(
    _rewardAddress: string,
    _rewardAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReward(address,uint256)"(
    _rewardAddress: string,
    _rewardAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeReward(
    index: BigNumberish,
    _rewardAddress: string,
    _rewardAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeReward(uint256,address,uint256)"(
    index: BigNumberish,
    _rewardAddress: string,
    _rewardAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256,bytes)"(
    amount: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  refund(overrides?: Overrides): Promise<ContractTransaction>;

  "refund()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimReward(overrides?: Overrides): Promise<ContractTransaction>;

  "claimReward()"(overrides?: Overrides): Promise<ContractTransaction>;

  getTierStakingLimits(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getTierStakingLimits()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getTiersSold(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getTiersSold()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getTiersCap(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getTiersCap()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  calculateReward(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "calculateReward(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawLostTokens(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawLostTokens(address)"(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositReceiverAddress(overrides?: CallOverrides): Promise<string>;

    "depositReceiverAddress()"(overrides?: CallOverrides): Promise<string>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    "depositToken()"(overrides?: CallOverrides): Promise<string>;

    duckTiers(overrides?: CallOverrides): Promise<string>;

    "duckTiers()"(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    "feePercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiverAddress(overrides?: CallOverrides): Promise<string>;

    "feeReceiverAddress()"(overrides?: CallOverrides): Promise<string>;

    harvestStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "harvestStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    isVerified(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isVerified(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    refundCountdown(overrides?: CallOverrides): Promise<BigNumber>;

    "refundCountdown()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      amount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      amount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    stakingFinishTime(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingFinishTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    tierStakingLimits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tierStakingLimits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tiersCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "tiersCap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tiersCapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "tiersCapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    tiersSold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tiersSold(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTier0Limit(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTier0Limit()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTier0Staked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTier0Staked()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userLastUnclaimedReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userLastUnclaimedReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyAddress(overrides?: CallOverrides): Promise<string>;

    "verifyAddress()"(overrides?: CallOverrides): Promise<string>;

    initialSetup(
      _stakingStartTime: BigNumberish,
      _stakingFinishTime: BigNumberish,
      _totalTier0Limit: BigNumberish,
      _stakingLimit: BigNumberish,
      _feePercent: BigNumberish,
      _tiersCap: BigNumberish[],
      _tiersCapTime: BigNumberish,
      _tierStakingLimits: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "initialSetup(uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256[])"(
      _stakingStartTime: BigNumberish,
      _stakingFinishTime: BigNumberish,
      _totalTier0Limit: BigNumberish,
      _stakingLimit: BigNumberish,
      _feePercent: BigNumberish,
      _tiersCap: BigNumberish[],
      _tiersCapTime: BigNumberish,
      _tierStakingLimits: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    secondarySetup(
      _harvestStartTime: BigNumberish,
      _verifyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "secondarySetup(uint256,address)"(
      _harvestStartTime: BigNumberish,
      _verifyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserStakingLimit(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserStakingLimit(address)"(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addReward(
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addReward(address,uint256)"(
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeReward(
      index: BigNumberish,
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeReward(uint256,address,uint256)"(
      index: BigNumberish,
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256,bytes)"(
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(overrides?: CallOverrides): Promise<void>;

    "refund()"(overrides?: CallOverrides): Promise<void>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    "claimReward()"(overrides?: CallOverrides): Promise<void>;

    getTierStakingLimits(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getTierStakingLimits()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getTiersSold(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getTiersSold()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getTiersCap(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getTiersCap()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    calculateReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateReward(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLostTokens(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawLostTokens(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Claimed(
      user: string | null,
      tokenAddress: string | null,
      index: BigNumberish | null,
      amount: null
    ): EventFilter;

    NewReward(tokenAddress: string | null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Refunded(user: string | null, amount: null): EventFilter;

    RewardChanged(
      index: BigNumberish | null,
      tokenAddress: string | null,
      amount: null
    ): EventFilter;

    Staked(
      user: string | null,
      feeAmount: BigNumberish | null,
      amount: null
    ): EventFilter;

    WithdrawnLostTokens(
      owner: string | null,
      tokenAddress: null,
      amountWithdrawn: null
    ): EventFilter;
  };

  estimateGas: {
    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositReceiverAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "depositReceiverAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    "depositToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    duckTiers(overrides?: CallOverrides): Promise<BigNumber>;

    "duckTiers()"(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    "feePercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiverAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "feeReceiverAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvestStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "harvestStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    isVerified(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isVerified(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    refundCountdown(overrides?: CallOverrides): Promise<BigNumber>;

    "refundCountdown()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingFinishTime(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingFinishTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    tierStakingLimits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tierStakingLimits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tiersCap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "tiersCap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tiersCapTime(overrides?: CallOverrides): Promise<BigNumber>;

    "tiersCapTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    tiersSold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tiersSold(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTier0Limit(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTier0Limit()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTier0Staked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTier0Staked()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userLastUnclaimedReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userLastUnclaimedReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "verifyAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialSetup(
      _stakingStartTime: BigNumberish,
      _stakingFinishTime: BigNumberish,
      _totalTier0Limit: BigNumberish,
      _stakingLimit: BigNumberish,
      _feePercent: BigNumberish,
      _tiersCap: BigNumberish[],
      _tiersCapTime: BigNumberish,
      _tierStakingLimits: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialSetup(uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256[])"(
      _stakingStartTime: BigNumberish,
      _stakingFinishTime: BigNumberish,
      _totalTier0Limit: BigNumberish,
      _stakingLimit: BigNumberish,
      _feePercent: BigNumberish,
      _tiersCap: BigNumberish[],
      _tiersCapTime: BigNumberish,
      _tierStakingLimits: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    secondarySetup(
      _harvestStartTime: BigNumberish,
      _verifyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "secondarySetup(uint256,address)"(
      _harvestStartTime: BigNumberish,
      _verifyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getUserStakingLimit(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserStakingLimit(address)"(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addReward(
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addReward(address,uint256)"(
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeReward(
      index: BigNumberish,
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeReward(uint256,address,uint256)"(
      index: BigNumberish,
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stake(uint256,bytes)"(
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    refund(overrides?: Overrides): Promise<BigNumber>;

    "refund()"(overrides?: Overrides): Promise<BigNumber>;

    claimReward(overrides?: Overrides): Promise<BigNumber>;

    "claimReward()"(overrides?: Overrides): Promise<BigNumber>;

    getTierStakingLimits(overrides?: CallOverrides): Promise<BigNumber>;

    "getTierStakingLimits()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTiersSold(overrides?: CallOverrides): Promise<BigNumber>;

    "getTiersSold()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTiersCap(overrides?: CallOverrides): Promise<BigNumber>;

    "getTiersCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateReward(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLostTokens(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawLostTokens(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositReceiverAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositReceiverAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    duckTiers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "duckTiers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feePercent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiverAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeReceiverAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "harvestStartTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVerified(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isVerified(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundCountdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "refundCountdown()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingFinishTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingFinishTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingStartTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tierStakingLimits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tierStakingLimits(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tiersCap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tiersCap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tiersCapTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tiersCapTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tiersSold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tiersSold(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStaked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTier0Limit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalTier0Limit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTier0Staked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalTier0Staked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userLastUnclaimedReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userLastUnclaimedReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "verifyAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialSetup(
      _stakingStartTime: BigNumberish,
      _stakingFinishTime: BigNumberish,
      _totalTier0Limit: BigNumberish,
      _stakingLimit: BigNumberish,
      _feePercent: BigNumberish,
      _tiersCap: BigNumberish[],
      _tiersCapTime: BigNumberish,
      _tierStakingLimits: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialSetup(uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256[])"(
      _stakingStartTime: BigNumberish,
      _stakingFinishTime: BigNumberish,
      _totalTier0Limit: BigNumberish,
      _stakingLimit: BigNumberish,
      _feePercent: BigNumberish,
      _tiersCap: BigNumberish[],
      _tiersCapTime: BigNumberish,
      _tierStakingLimits: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    secondarySetup(
      _harvestStartTime: BigNumberish,
      _verifyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "secondarySetup(uint256,address)"(
      _harvestStartTime: BigNumberish,
      _verifyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getUserStakingLimit(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserStakingLimit(address)"(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addReward(
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReward(address,uint256)"(
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeReward(
      index: BigNumberish,
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeReward(uint256,address,uint256)"(
      index: BigNumberish,
      _rewardAddress: string,
      _rewardAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256,bytes)"(
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    refund(overrides?: Overrides): Promise<PopulatedTransaction>;

    "refund()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimReward(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimReward()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getTierStakingLimits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTierStakingLimits()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTiersSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTiersSold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTiersCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTiersCap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateReward(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLostTokens(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawLostTokens(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
