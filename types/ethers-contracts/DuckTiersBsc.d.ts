/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DuckTiersBscInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "snapshotAuthorizedAddress()": FunctionFragment;
    "tierPrice(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "userTier(address)": FunctionFragment;
    "initTiers(uint8[],uint256[])": FunctionFragment;
    "updateSnapshotAuthorizedAddress(address)": FunctionFragment;
    "updateTier(uint8,uint256)": FunctionFragment;
    "setUserStaked(address[],uint256[])": FunctionFragment;
    "getUserTier(address)": FunctionFragment;
    "getTiers()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "snapshotAuthorizedAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tierPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(functionFragment: "userTier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initTiers",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSnapshotAuthorizedAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserStaked",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "getUserTier", values: [string]): string;
  encodeFunctionData(functionFragment: "getTiers", values?: undefined): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "snapshotAuthorizedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tierPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userTier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initTiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSnapshotAuthorizedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUserStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTiers", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class DuckTiersBsc extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DuckTiersBscInterface;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    snapshotAuthorizedAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "snapshotAuthorizedAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tierPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tierPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      staked: BigNumber;
      stakedTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      staked: BigNumber;
      stakedTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    userTier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "userTier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    initTiers(
      _tierIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initTiers(uint8[],uint256[])"(
      _tierIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateSnapshotAuthorizedAddress(
      _snapshotAuth: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateSnapshotAuthorizedAddress(address)"(
      _snapshotAuth: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTier(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTier(uint8,uint256)"(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUserStaked(
      _addresses: string[],
      _balances: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUserStaked(address[],uint256[])"(
      _addresses: string[],
      _balances: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getUserTier(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      res: number;
      0: number;
    }>;

    "getUserTier(address)"(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      res: number;
      0: number;
    }>;

    getTiers(
      overrides?: CallOverrides
    ): Promise<{
      buf: BigNumber[];
      0: BigNumber[];
    }>;

    "getTiers()"(
      overrides?: CallOverrides
    ): Promise<{
      buf: BigNumber[];
      0: BigNumber[];
    }>;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  snapshotAuthorizedAddress(overrides?: CallOverrides): Promise<string>;

  "snapshotAuthorizedAddress()"(overrides?: CallOverrides): Promise<string>;

  tierPrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "tierPrice(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    staked: BigNumber;
    stakedTime: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "userInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    staked: BigNumber;
    stakedTime: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  userTier(arg0: string, overrides?: CallOverrides): Promise<number>;

  "userTier(address)"(arg0: string, overrides?: CallOverrides): Promise<number>;

  initTiers(
    _tierIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initTiers(uint8[],uint256[])"(
    _tierIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateSnapshotAuthorizedAddress(
    _snapshotAuth: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateSnapshotAuthorizedAddress(address)"(
    _snapshotAuth: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTier(
    _tierId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTier(uint8,uint256)"(
    _tierId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUserStaked(
    _addresses: string[],
    _balances: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUserStaked(address[],uint256[])"(
    _addresses: string[],
    _balances: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getUserTier(_userAddress: string, overrides?: CallOverrides): Promise<number>;

  "getUserTier(address)"(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getTiers(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getTiers()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    snapshotAuthorizedAddress(overrides?: CallOverrides): Promise<string>;

    "snapshotAuthorizedAddress()"(overrides?: CallOverrides): Promise<string>;

    tierPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tierPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      staked: BigNumber;
      stakedTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      staked: BigNumber;
      stakedTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    userTier(arg0: string, overrides?: CallOverrides): Promise<number>;

    "userTier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    initTiers(
      _tierIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "initTiers(uint8[],uint256[])"(
      _tierIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSnapshotAuthorizedAddress(
      _snapshotAuth: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSnapshotAuthorizedAddress(address)"(
      _snapshotAuth: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTier(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTier(uint8,uint256)"(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserStaked(
      _addresses: string[],
      _balances: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setUserStaked(address[],uint256[])"(
      _addresses: string[],
      _balances: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getUserTier(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "getUserTier(address)"(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getTiers(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getTiers()"(overrides?: CallOverrides): Promise<BigNumber[]>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    snapshotAuthorizedAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "snapshotAuthorizedAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tierPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tierPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTier(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userTier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initTiers(
      _tierIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initTiers(uint8[],uint256[])"(
      _tierIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateSnapshotAuthorizedAddress(
      _snapshotAuth: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateSnapshotAuthorizedAddress(address)"(
      _snapshotAuth: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTier(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTier(uint8,uint256)"(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUserStaked(
      _addresses: string[],
      _balances: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUserStaked(address[],uint256[])"(
      _addresses: string[],
      _balances: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getUserTier(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserTier(address)"(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTiers(overrides?: CallOverrides): Promise<BigNumber>;

    "getTiers()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    snapshotAuthorizedAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "snapshotAuthorizedAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tierPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tierPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userTier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initTiers(
      _tierIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initTiers(uint8[],uint256[])"(
      _tierIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateSnapshotAuthorizedAddress(
      _snapshotAuth: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateSnapshotAuthorizedAddress(address)"(
      _snapshotAuth: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTier(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTier(uint8,uint256)"(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUserStaked(
      _addresses: string[],
      _balances: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUserStaked(address[],uint256[])"(
      _addresses: string[],
      _balances: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getUserTier(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserTier(address)"(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTiers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTiers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
